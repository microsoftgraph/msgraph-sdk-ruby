require 'date'
require 'microsoft_kiota_abstractions'
require_relative '../microsoft_graph'
require_relative './models'

module MicrosoftGraph
    module Models
        ## 
        # Malware detection entity.
        class WindowsDeviceMalwareState < MicrosoftGraph::Models::Entity
            include MicrosoftKiotaAbstractions::Parsable
            ## 
            # Information URL to learn more about the malware
            @additional_information_url
            ## 
            # Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
            @category
            ## 
            # Number of times the malware is detected
            @detection_count
            ## 
            # Malware name
            @display_name
            ## 
            # Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
            @execution_state
            ## 
            # Initial detection datetime of the malware
            @initial_detection_date_time
            ## 
            # The last time this particular threat was changed
            @last_state_change_date_time
            ## 
            # Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
            @severity
            ## 
            # Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
            @state
            ## 
            # Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
            @threat_state
            ## 
            ## Gets the additionalInformationUrl property value. Information URL to learn more about the malware
            ## @return a string
            ## 
            def additional_information_url
                return @additional_information_url
            end
            ## 
            ## Sets the additionalInformationUrl property value. Information URL to learn more about the malware
            ## @param value Value to set for the additionalInformationUrl property.
            ## @return a void
            ## 
            def additional_information_url=(value)
                @additional_information_url = value
            end
            ## 
            ## Gets the category property value. Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
            ## @return a windows_malware_category
            ## 
            def category
                return @category
            end
            ## 
            ## Sets the category property value. Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
            ## @param value Value to set for the category property.
            ## @return a void
            ## 
            def category=(value)
                @category = value
            end
            ## 
            ## Instantiates a new windowsDeviceMalwareState and sets the default values.
            ## @return a void
            ## 
            def initialize()
                super
            end
            ## 
            ## Creates a new instance of the appropriate class based on discriminator value
            ## @param parse_node The parse node to use to read the discriminator value and create the object
            ## @return a windows_device_malware_state
            ## 
            def self.create_from_discriminator_value(parse_node)
                raise StandardError, 'parse_node cannot be null' if parse_node.nil?
                return WindowsDeviceMalwareState.new
            end
            ## 
            ## Gets the detectionCount property value. Number of times the malware is detected
            ## @return a integer
            ## 
            def detection_count
                return @detection_count
            end
            ## 
            ## Sets the detectionCount property value. Number of times the malware is detected
            ## @param value Value to set for the detectionCount property.
            ## @return a void
            ## 
            def detection_count=(value)
                @detection_count = value
            end
            ## 
            ## Gets the displayName property value. Malware name
            ## @return a string
            ## 
            def display_name
                return @display_name
            end
            ## 
            ## Sets the displayName property value. Malware name
            ## @param value Value to set for the displayName property.
            ## @return a void
            ## 
            def display_name=(value)
                @display_name = value
            end
            ## 
            ## Gets the executionState property value. Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
            ## @return a windows_malware_execution_state
            ## 
            def execution_state
                return @execution_state
            end
            ## 
            ## Sets the executionState property value. Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
            ## @param value Value to set for the executionState property.
            ## @return a void
            ## 
            def execution_state=(value)
                @execution_state = value
            end
            ## 
            ## The deserialization information for the current model
            ## @return a i_dictionary
            ## 
            def get_field_deserializers()
                return super.merge({
                    "additionalInformationUrl" => lambda {|n| @additional_information_url = n.get_string_value() },
                    "category" => lambda {|n| @category = n.get_enum_value(MicrosoftGraph::Models::WindowsMalwareCategory) },
                    "detectionCount" => lambda {|n| @detection_count = n.get_number_value() },
                    "displayName" => lambda {|n| @display_name = n.get_string_value() },
                    "executionState" => lambda {|n| @execution_state = n.get_enum_value(MicrosoftGraph::Models::WindowsMalwareExecutionState) },
                    "initialDetectionDateTime" => lambda {|n| @initial_detection_date_time = n.get_date_time_value() },
                    "lastStateChangeDateTime" => lambda {|n| @last_state_change_date_time = n.get_date_time_value() },
                    "severity" => lambda {|n| @severity = n.get_enum_value(MicrosoftGraph::Models::WindowsMalwareSeverity) },
                    "state" => lambda {|n| @state = n.get_enum_value(MicrosoftGraph::Models::WindowsMalwareState) },
                    "threatState" => lambda {|n| @threat_state = n.get_enum_value(MicrosoftGraph::Models::WindowsMalwareThreatState) },
                })
            end
            ## 
            ## Gets the initialDetectionDateTime property value. Initial detection datetime of the malware
            ## @return a date_time
            ## 
            def initial_detection_date_time
                return @initial_detection_date_time
            end
            ## 
            ## Sets the initialDetectionDateTime property value. Initial detection datetime of the malware
            ## @param value Value to set for the initialDetectionDateTime property.
            ## @return a void
            ## 
            def initial_detection_date_time=(value)
                @initial_detection_date_time = value
            end
            ## 
            ## Gets the lastStateChangeDateTime property value. The last time this particular threat was changed
            ## @return a date_time
            ## 
            def last_state_change_date_time
                return @last_state_change_date_time
            end
            ## 
            ## Sets the lastStateChangeDateTime property value. The last time this particular threat was changed
            ## @param value Value to set for the lastStateChangeDateTime property.
            ## @return a void
            ## 
            def last_state_change_date_time=(value)
                @last_state_change_date_time = value
            end
            ## 
            ## Serializes information the current object
            ## @param writer Serialization writer to use to serialize this model
            ## @return a void
            ## 
            def serialize(writer)
                raise StandardError, 'writer cannot be null' if writer.nil?
                super
                writer.write_string_value("additionalInformationUrl", @additional_information_url)
                writer.write_enum_value("category", @category)
                writer.write_number_value("detectionCount", @detection_count)
                writer.write_string_value("displayName", @display_name)
                writer.write_enum_value("executionState", @execution_state)
                writer.write_date_time_value("initialDetectionDateTime", @initial_detection_date_time)
                writer.write_date_time_value("lastStateChangeDateTime", @last_state_change_date_time)
                writer.write_enum_value("severity", @severity)
                writer.write_enum_value("state", @state)
                writer.write_enum_value("threatState", @threat_state)
            end
            ## 
            ## Gets the severity property value. Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
            ## @return a windows_malware_severity
            ## 
            def severity
                return @severity
            end
            ## 
            ## Sets the severity property value. Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
            ## @param value Value to set for the severity property.
            ## @return a void
            ## 
            def severity=(value)
                @severity = value
            end
            ## 
            ## Gets the state property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
            ## @return a windows_malware_state
            ## 
            def state
                return @state
            end
            ## 
            ## Sets the state property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
            ## @param value Value to set for the state property.
            ## @return a void
            ## 
            def state=(value)
                @state = value
            end
            ## 
            ## Gets the threatState property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
            ## @return a windows_malware_threat_state
            ## 
            def threat_state
                return @threat_state
            end
            ## 
            ## Sets the threatState property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
            ## @param value Value to set for the threatState property.
            ## @return a void
            ## 
            def threat_state=(value)
                @threat_state = value
            end
        end
    end
end
